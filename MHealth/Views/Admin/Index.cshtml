@{
    ViewData["Title"] = "Dashboard";
    ViewData["Menu"] = "Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    string[] TableHeaders = new string[]
    {
    "Name",
    "Username",
    "Email",
    //"Role",
    "Actions"
    };
}

<h5 class="mt-3">@ViewData["Title"]</h5>

@*<div class="row">
    <div class="col-md-12">
        <form asp-controller="Admin" asp-action="SearchUser" method="post">
            <div class="row form-group">
               <div class="col-md-6">
                   <input name="search" class="form-control" placeholder="Search by name" />
               </div>
               <div class="col-md-2">
                   <button type="submit" class="btn btn-info"></button>
               </div>
           </div>
        </form>
    </div>
</div>*@

<div class="row">
    <div class="col-md-12">
        <a asp-action="CreateStaff" asp-controller="Admin" class="btn btn-primary">Create Staff</a>
        <button onclick="exportTableToCSV()" class="btn btn-success">Export to CSV</button>
        <button onclick="exportTableToJson()" class="btn btn-success">Export Table to JSON</button>
    </div>
</div>


<div class="row mt-3">
    <div class="col-md-12">
        <table class="table bg-white rounded shadow-sm  table-hover" id="userTable">
            <thead>
                <tr>
                    @foreach (var header in TableHeaders)
                    {
                        <th>
                            @header
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    @foreach (var Data in Model.Users)
                    {
                        <tr>
                            <td>@Data.Name</td>
                            <td>@Data.UserName</td>
                            <td>@Data.Email</td>
                            @*<td>@Data.rol</td>*@
                            <td>
                                
                                <div class="btn-group btn-group-md">
                                    <form asp-controller="Admin" asp-action="DeleteUser" method="post" asp-route-id="@Data.Id">

                                        <a class="btn btn-success mx-2" asp-controller="Admin" asp-action="EditUser" asp-route-id="@Data.Id">Edit</a>
                                    @*<a class="btn btn-danger mx-2" asp-controller="Admin" asp-action="DeleteUser" asp-route-id="@Data.Id">Edit</a>*@
                                        <button type="submit" class="btn btn-danger" >Delete</button>
                                    </form>
                                </div>
                                
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                @if (Model.CurrentPage != 1)
                {
                    <li class="page-item"><a class="page-link" href="?currentPage=@(Model.CurrentPage-1)">Previous</a></li>

                }
                @for (int i=1; i<=Model.TotalPages; i++)
                {
                    if (i == Model.CurrentPage)
                    {
                        <li class="page-item"><a class="page-link active" href="?currentPage=@i">@i</a></li>
                    }
                    else
                    {
                        <li class="page-item"><a class="page-link" href="?currentPage=@i">@i</a></li>
                    }
                }
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item"><a class="page-link" href="?currentPage=@(Model.CurrentPage+1)">Next</a></li>
                }
            </ul>
        </nav>
    </div>
</div>



<script>
    function exportTableToCSV() {
        let table = document.getElementById("userTable");
        let csv = [];
        for (let row of table.rows) {
            let cols = [];
            for (let cell of row.cells) {
                console.log(cell.innerText);
                cols.push(cell.innerText);
            }
            csv.push(cols.join(","));
        }
        let csvData = csv.join("\n");

        let blob = new Blob([csvData], { type: 'text/csv' });
        let url = window.URL.createObjectURL(blob);
        let downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = 'userTable.csv';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
    }

    function exportTableToJson() {
        const table = document.getElementById("userTable");
        const rows = table.querySelectorAll("tr");
        const headers = Array.from(rows[0].querySelectorAll("th")).map(th => th.innerText);
        const data = [];
        const columnIndexToExclude = headers.indexOf("Actions"); // Replace "ColumnNameToExclude" with the name of the column you want to exclude

        for (let i = 1; i < rows.length; i++) { // Start from 1 to avoid the header row
            const cells = rows[i].querySelectorAll("td");
            const rowData = {};
            headers.forEach((header, index) => {
                if (index !== columnIndexToExclude) {
                    rowData[header] = cells[index].innerText;
                }
            });
            data.push(rowData);
        }

        const jsonStr = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = 'userTable.json';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
    }
</script>